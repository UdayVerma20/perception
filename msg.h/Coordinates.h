// Generated by gencpp from file perception/Coordinates.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_COORDINATES_H
#define PERCEPTION_MESSAGE_COORDINATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception
{
template <class ContainerAllocator>
struct Coordinates_
{
  typedef Coordinates_<ContainerAllocator> Type;

  Coordinates_()
    : size(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , colour(0.0)
    , left()
    , right()
    , front()
    , back()
    , top()
    , bottom()  {
    }
  Coordinates_(const ContainerAllocator& _alloc)
    : size(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , colour(0.0)
    , left(_alloc)
    , right(_alloc)
    , front(_alloc)
    , back(_alloc)
    , top(_alloc)
    , bottom(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _size_type;
  _size_type size;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _colour_type;
  _colour_type colour;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _left_type;
  _left_type left;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _right_type;
  _right_type right;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _front_type;
  _front_type front;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _back_type;
  _back_type back;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _top_type;
  _top_type top;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _bottom_type;
  _bottom_type bottom;





  typedef boost::shared_ptr< ::perception::Coordinates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::Coordinates_<ContainerAllocator> const> ConstPtr;

}; // struct Coordinates_

typedef ::perception::Coordinates_<std::allocator<void> > Coordinates;

typedef boost::shared_ptr< ::perception::Coordinates > CoordinatesPtr;
typedef boost::shared_ptr< ::perception::Coordinates const> CoordinatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::Coordinates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::Coordinates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::Coordinates_<ContainerAllocator1> & lhs, const ::perception::Coordinates_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.colour == rhs.colour &&
    lhs.left == rhs.left &&
    lhs.right == rhs.right &&
    lhs.front == rhs.front &&
    lhs.back == rhs.back &&
    lhs.top == rhs.top &&
    lhs.bottom == rhs.bottom;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::Coordinates_<ContainerAllocator1> & lhs, const ::perception::Coordinates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::Coordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::Coordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37cbff643f1dc0255bb6116eac4fca9b";
  }

  static const char* value(const ::perception::Coordinates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37cbff643f1dc025ULL;
  static const uint64_t static_value2 = 0x5bb6116eac4fca9bULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/Coordinates";
  }

  static const char* value(const ::perception::Coordinates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 size\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 colour\n"
"float32[] left\n"
"float32[] right\n"
"float32[] front\n"
"float32[] back\n"
"float32[] top\n"
"float32[] bottom\n"
;
  }

  static const char* value(const ::perception::Coordinates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::Coordinates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.colour);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.front);
      stream.next(m.back);
      stream.next(m.top);
      stream.next(m.bottom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coordinates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::Coordinates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::Coordinates_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.size);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "colour: ";
    Printer<float>::stream(s, indent + "  ", v.colour);
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left[i]);
    }
    s << indent << "right[]" << std::endl;
    for (size_t i = 0; i < v.right.size(); ++i)
    {
      s << indent << "  right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right[i]);
    }
    s << indent << "front[]" << std::endl;
    for (size_t i = 0; i < v.front.size(); ++i)
    {
      s << indent << "  front[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.front[i]);
    }
    s << indent << "back[]" << std::endl;
    for (size_t i = 0; i < v.back.size(); ++i)
    {
      s << indent << "  back[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.back[i]);
    }
    s << indent << "top[]" << std::endl;
    for (size_t i = 0; i < v.top.size(); ++i)
    {
      s << indent << "  top[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.top[i]);
    }
    s << indent << "bottom[]" << std::endl;
    for (size_t i = 0; i < v.bottom.size(); ++i)
    {
      s << indent << "  bottom[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bottom[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_COORDINATES_H
