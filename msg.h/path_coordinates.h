// Generated by gencpp from file perception/path_coordinates.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_PATH_COORDINATES_H
#define PERCEPTION_MESSAGE_PATH_COORDINATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception
{
template <class ContainerAllocator>
struct path_coordinates_
{
  typedef path_coordinates_<ContainerAllocator> Type;

  path_coordinates_()
    : first()
    , second()  {
    }
  path_coordinates_(const ContainerAllocator& _alloc)
    : first(_alloc)
    , second(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _first_type;
  _first_type first;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _second_type;
  _second_type second;





  typedef boost::shared_ptr< ::perception::path_coordinates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::path_coordinates_<ContainerAllocator> const> ConstPtr;

}; // struct path_coordinates_

typedef ::perception::path_coordinates_<std::allocator<void> > path_coordinates;

typedef boost::shared_ptr< ::perception::path_coordinates > path_coordinatesPtr;
typedef boost::shared_ptr< ::perception::path_coordinates const> path_coordinatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::path_coordinates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::path_coordinates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::path_coordinates_<ContainerAllocator1> & lhs, const ::perception::path_coordinates_<ContainerAllocator2> & rhs)
{
  return lhs.first == rhs.first &&
    lhs.second == rhs.second;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::path_coordinates_<ContainerAllocator1> & lhs, const ::perception::path_coordinates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::path_coordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::path_coordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::path_coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::path_coordinates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::path_coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::path_coordinates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::path_coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee9c27de38d5b62cbdb0c60f6e06c88a";
  }

  static const char* value(const ::perception::path_coordinates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee9c27de38d5b62cULL;
  static const uint64_t static_value2 = 0xbdb0c60f6e06c88aULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::path_coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/path_coordinates";
  }

  static const char* value(const ::perception::path_coordinates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::path_coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] first\n"
"float32[] second\n"
;
  }

  static const char* value(const ::perception::path_coordinates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::path_coordinates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first);
      stream.next(m.second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_coordinates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::path_coordinates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::path_coordinates_<ContainerAllocator>& v)
  {
    s << indent << "first[]" << std::endl;
    for (size_t i = 0; i < v.first.size(); ++i)
    {
      s << indent << "  first[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.first[i]);
    }
    s << indent << "second[]" << std::endl;
    for (size_t i = 0; i < v.second.size(); ++i)
    {
      s << indent << "  second[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.second[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_PATH_COORDINATES_H
