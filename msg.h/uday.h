// Generated by gencpp from file perception/uday.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_UDAY_H
#define PERCEPTION_MESSAGE_UDAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception
{
template <class ContainerAllocator>
struct uday_
{
  typedef uday_<ContainerAllocator> Type;

  uday_()
    : leftcone()
    , rightcone()  {
    }
  uday_(const ContainerAllocator& _alloc)
    : leftcone(_alloc)
    , rightcone(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _leftcone_type;
  _leftcone_type leftcone;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rightcone_type;
  _rightcone_type rightcone;





  typedef boost::shared_ptr< ::perception::uday_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::uday_<ContainerAllocator> const> ConstPtr;

}; // struct uday_

typedef ::perception::uday_<std::allocator<void> > uday;

typedef boost::shared_ptr< ::perception::uday > udayPtr;
typedef boost::shared_ptr< ::perception::uday const> udayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::uday_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::uday_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::uday_<ContainerAllocator1> & lhs, const ::perception::uday_<ContainerAllocator2> & rhs)
{
  return lhs.leftcone == rhs.leftcone &&
    lhs.rightcone == rhs.rightcone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::uday_<ContainerAllocator1> & lhs, const ::perception::uday_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::uday_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::uday_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::uday_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::uday_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::uday_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::uday_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::uday_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b4453f922548fcbf3a0349edc500566";
  }

  static const char* value(const ::perception::uday_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b4453f922548fcbULL;
  static const uint64_t static_value2 = 0xf3a0349edc500566ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::uday_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/uday";
  }

  static const char* value(const ::perception::uday_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::uday_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] leftcone\n"
"float32[] rightcone\n"
;
  }

  static const char* value(const ::perception::uday_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::uday_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftcone);
      stream.next(m.rightcone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uday_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::uday_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::uday_<ContainerAllocator>& v)
  {
    s << indent << "leftcone[]" << std::endl;
    for (size_t i = 0; i < v.leftcone.size(); ++i)
    {
      s << indent << "  leftcone[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.leftcone[i]);
    }
    s << indent << "rightcone[]" << std::endl;
    for (size_t i = 0; i < v.rightcone.size(); ++i)
    {
      s << indent << "  rightcone[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rightcone[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_UDAY_H
